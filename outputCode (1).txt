#include <iostream>
#include <vector>
#include <cmath>
#include <SDL2/SDL.h>

SDL_Window* window;
SDL_Renderer* renderer;

struct Rect {
    int x;
    int y;
    int width;
    int height;
};

struct Sprite {
    SDL_Texture* texture;
    int x;
    int y;
};

struct AnimatedSprite {
    SDL_Texture* texture;
    int x;
    int y;
    int frame;
    std::vector<Rect> frames;
};

struct Sound {
    Mix_Chunk* sound;
};

enum State {
    GAME = -1,
    WIN = -2,
    LOSS = -3,
    MENU = -4
};

bool left = false;
bool right = false;
bool up = false;
bool down = false;
bool space = false;

std::vector<Rect> levels[] = {
    {{300, 450, 100, 100}, {600, 250, 50, 350}, {250, 250, 250, 100}, {110, 205, 50, 20}, {0, 550, 800, 50}, {300, 100, 485, 50}},
    {{43, 405, 100, 100}, {257, 378, 100, 100}, {449, 288, 50, 50}, {564, 178, 50, 50}, {621, 374, 485, 50}},
    {{91, 281, 260, 86}, {445, 294, 220, 89}, {267, 489, 256, 45}, {333, 105, 10, 160}, {383, 147, 31, 39}, {554, 148, 30, 36}}
};

std::vector<Rect> playerstart[] = {
    {{100, 494, 714, 30, 450, 250}},
    {{75, 350, 732, 308, 507, 238}},
    {{548, 242, 173, 215, 365, 427}}
};

int lvlnum = 0;
int pwlkanim[] = {1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6};
int winnum = 2;

Rect player = {100, 494, 30, 50};
Rect win = {714, 30, 30, 30};
Rect lose = {450, 250, 30, 30};

Sound jsound;
Sound wsound;

bool youwin = false;
bool youlose = false;

State state = MENU;

void keydown(SDL_Event& event) {
    switch (event.key.keysym.sym) {
        case SDLK_UP: space = true; break;
        case SDLK_LEFT: left = true; break;
        case SDLK_UP: up = true; break;
        case SDLK_RIGHT: right = true; break;
        case SDLK_DOWN: down = true; break;
    }
}

void keyup(SDL_Event& event) {
    switch (event.key.keysym.sym) {
        case SDLK_UP: space = false; break;
        case SDLK_LEFT: left = false; break;
        case SDLK_UP: up = false; break;
        case SDLK_RIGHT: right = false; break;
        case SDLK_DOWN: down = false; break;
    }
}

bool intersectRect(Rect r1, Rect r2) {
    return !(r2.x > r1.x + r1.width || r2.x + r2.width < r1.x || r2.y > r1.y + r1.height || r2.y + r2.height < r1.y);
}

void gameLogic() {
    if (!youwin && !youlose) {
        controlLogic();
        handleGravity();
        spritelogic();
    }
    winloselogic();
}

void controlLogic() {
    int pSpeed = 3;
    if (crouch)
        pSpeed /= 2;
    else
        pSpeed = 3;
    if (left && !isColliding(x - pSpeed, y))
        x -= pSpeed;
    if (right && !isColliding(x + pSpeed, y))
        x += pSpeed;
    if (space && canJump) {
        jsound.play();
        vspd = -7;
        canJump = false;
    }
    if (!space && vspd < -2) {
        vspd = -2;
    }
    if ((left || right) && isColliding(x, y + 1)) {
        wsound.play();
    }
    if (isColliding(x, y + 1) && down)
        crouch = true;
    else
        crouch = false;
}

void handleGravity() {
    if (crouch)
        canJump = false;
    if (!isColliding(x, y + vspd)) {
        y += vspd;
        vspd += .1;
    }
    else {
        for (int i = vspd; i > 0; i--) {
            if (!isColliding(x, y + i)) {
                y += i;
                break;
            }
        }
        if (isColliding(x, y + 1) && !crouch) {
            canJump = true;
        }
        vspd = 0;
    }
}

void spritelogic() {
    if (vspd < -0.1) {
        psframe = 8;
    }
    else if (vspd > 0.1 && !isColliding(x, y + 1)) {
        psframe = 10;
    }
    else if (left ^ right) {
        psframe = pwlkanim[blink];
    }
    else if (vspd == 0) {
        psframe = 9;
    }
    if (crouch) {
        psframe = 11;
    }
}

void winloselogic() {
    if (colide_with_sprite(x, y, win)) {
        if (lvlnum == winnum) {
            state = WIN;
        }
        else {
            x = playerstart[lvlnum + 1][0];
            y = playerstart[lvlnum + 1][1];
            winx = playerstart[lvlnum + 1][2];
            winy = playerstart[lvlnum + 1][3];
            losex = playerstart[lvlnum + 1][4];
            losey = playerstart[lvlnum + 1][5];
            lvlnum++;
        }
    }
    if (colide_with_sprite(x, y, lose)) {
        state = LOSS;
    }
}

void paintScreen() {
    SDL_SetRenderDrawColor(renderer, 105, 105, 105, 255);
    SDL_RenderClear(renderer);
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_Rect playerRect = {player.x, player.y, player.width, player.height};
    SDL_RenderFillRect(renderer, &playerRect);
    SDL_Rect winRect = {win.x, win.y, win.width, win.height};
    SDL_RenderFillRect(renderer, &winRect);
    SDL_Rect loseRect = {lose.x, lose.y, lose.width, lose.height};
    SDL_RenderFillRect(renderer, &loseRect);
    SDL_RenderPresent(renderer);
}

int main() {
    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO);
    Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048);
    window = SDL_CreateWindow("Game", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 800, 600, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    SDL_Event event;
    bool quit = false;
    while (!quit) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                quit = true;
            }
            else if (event.type == SDL_KEYDOWN) {
                keydown(event);
            }
            else if (event.type == SDL_KEYUP) {
                keyup(event);
            }
        }
        switch (state) {
            case GAME:
                gameLogic();
                paintScreen();
                break;
            case WIN:
                youwinloop();
                break;
            case LOSS:
                youlosloop();
                break;
            case MENU:
                menu();
                break;
        }
    }
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    Mix_CloseAudio();
    SDL_Quit();
    return 0;
}


